@mixin replaceImage($path, $scale: 1){
  $width: image-width($path) * $scale;
  $height: image-height($path) * $scale;
  display: block;
  background: image-url($path) no-repeat;
  @include background-size($width, $height);
  width: $width;
  height: $height;
  text-indent: -9999px;
}

@mixin backgroundImage($path, $scale: 1){
  $width: image-width($path) * $scale;
  $height: image-height($path) * $scale;
  background: image-url($path);
  @include background-size($width, $height);
}

@mixin loadSpriteAll(
    $dir, $reg, $sprName,
    $scale: 1, $dummy: false, $nest: false, $animation: false, $duration: 1s, $inner: "&:before", $spacing: 1px){
  @if ($dummy == true){
    @include _loadSpriteAllDummy($dir, $sprName, $scale, $animation);
  } @else {
    $spr: sprite-map("#{$dir}/#{$reg}", $spacing: $spacing, $layout: horizontal);
    @if ($nest == true) {
      @include _loadSpriteAllNest($spr, $sprName, $scale, $animation, $duration, $inner);
    } @else {
      @include _loadSpriteAll($spr, $sprName, $scale, $animation, $duration);
    }
  }
}

@mixin _loadSprite($spr, $name, $scale){
  $sprPath: sprite-path($spr);
  $width: ceil((image-width(sprite-file($spr, $name))) * $scale);
  $height: ceil((image-height(sprite-file($spr, $name))) * $scale);
  $pos: sprite-position($spr, $name);
  $left: floor(nth($pos, 1) * $scale);
  $top: floor(nth($pos, 2) * $scale);
  background-position: $left $top;
  width: $width;
  height: $height;
};

@mixin _loadSpriteTransform($spr, $name, $scale){
  $sprPath: sprite-path($spr);
  $width: ceil((image-width(sprite-file($spr, $name))) * $scale);
  $height: ceil((image-height(sprite-file($spr, $name))) * $scale);
  $pos: sprite-position($spr, $name);
  $left: floor(nth($pos, 1) * $scale);
  $top: floor(nth($pos, 2) * $scale);
  @include translate($left, $top);
};

@mixin _loadSpriteAll($spr, $sprName, $scale, $animation, $duration){
  $sprImage: sprite-url($spr);
  $sprPath: sprite-path($spr);
  $sprWidth: ceil(image-width($sprPath) * $scale);
  $sprHeight: ceil(image-height($sprPath) * $scale);
  .#{$sprName}{
    background:image-url($sprPath) no-repeat;
    background-repeat: no-repeat;
    @include background-size($sprWidth, $sprHeight);
    display: block;
    text-indent: -9999px;
  }
  $n: 0;
  $width: 0px;
  $height: 0px;
  @each $fileName in sprite-names($spr){
    .#{$sprName}.#{$fileName}{
      $width: ceil((image-width(sprite-file($spr, $fileName))) * $scale);
      $height: ceil((image-height(sprite-file($spr, $fileName))) * $scale);
      @include _loadSprite($spr, $fileName, $scale);
    }
    $n: $n + 1;
  }
  @if ($animation != false){
    $animName: #{$sprName}-anim;
    $posLast: -$sprWidth * ( $n - 1 ) / $n;
    @include keyframes($animName){
      0%{ background-position: 0px 0px; }
      100%{ background-position: $posLast 0px; }
    }
    .#{$sprName}.anim{
      width: $width;
      height: $height;
      @include animation($duration, $animName, steps($n - 1, end));
    }
  }
}

@mixin _loadSpriteAllNest($spr, $sprName, $scale, $animation, $duration, $inner){
  $sprImage: sprite-url($spr);
  $sprPath: sprite-path($spr);
  $sprWidth: ceil(image-width($sprPath) * $scale);
  $sprHeight: ceil(image-height($sprPath) * $scale);
  .#{$sprName}{
    overflow: hidden;
    width: 0;
    height: 0;
    #{$inner}{
      @if ($inner == "&.before"){
        content: "";
      }
      background:image-url($sprPath) no-repeat;
      background-repeat: no-repeat;
      @include background-size($sprWidth, $sprHeight);
      display: block;
      text-indent: -9999px;
      width: $sprWidth;
      height: $sprHeight;
    }
  }
  $n: 0;
  $width: 0px;
  $height: 0px;
  @each $fileName in sprite-names($spr){
    .#{$sprName}.#{$fileName}{
      $width: ceil((image-width(sprite-file($spr, $fileName))) * $scale);
      $height: ceil((image-height(sprite-file($spr, $fileName))) * $scale);
      width: $width;
      height: $height;
      #{$inner}{
        @include _loadSpriteTransform($spr, $fileName, $scale);
      }
    }
    $n: $n + 1;
  }
  @if ($animation != false){
    $animName: #{$sprName}-anim;
    $posLast: -$sprWidth * ( $n - 1 ) / $n;
    @include keyframes($animName){
      0%{ @include transform(translateX(0px)); }
      100%{ @include transform(translateX(#{$posLast})); }
    }
    .#{$sprName}.anim{
      width: $width;
      height: $height;
      #{$inner}{
        @include animation($duration, $animName, steps($n - 1, end));
      }
    }
  }
}

@mixin _loadSpriteAllDummy($sprPath, $sprName, $scale: 1){
  .#{$sprName}{
    display: block;
    text-indent: -9999px;
  }
  @each $fileName in fileList("src/img/" + $sprPath + "/*.png", false, ".png"){
    .#{$sprName}.#{$fileName}{
      @include replaceImage($sprPath + "/" + $fileName + ".png", $scale);
    }
  }
}

@mixin keyframes ($animation_name) {
  @-webkit-keyframes $animation_name {
    @content;
  }
  @-moz-keyframes $animation_name {
    @content;
  }
  @-o-keyframes $animation_name {
    @content;
  }
  @keyframes $animation_name {
    @content;
  }
}

/*
    Example usage: 
    @include animation(10s, 5s, changecolour, linear)
*/

@mixin animation ($duration, $animation, $easing: ease, $iteration-count: infinite) {
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $animation;
  -webkit-animation-timing-function: $easing;
  -webkit-animation-iteration-count: $iteration-count;

  -moz-animation-duration: $duration;
  -moz-animation-name: $animation;
  -moz-animation-timing-function: $easing;
  -moz-animation-iteration-count: $iteration-count;

  -o-animation-duration: $duration;
  -o-animation-name: $animation;
  -o-animation-timing-function: $easing;
  -o-animation-iteration-count: $iteration-count;

  animation-duration: $duration;
  animation-name: $animation;
  animation-timing-function: $easing;
  animation-iteration-count: $iteration-count;
}

@mixin position($x, $y, $unit: "px", $translate: false){
  $x_unit: "#{$x}#{$unit}";
  $y_unit: "#{$y}#{$unit}";
  @if(translate == false){
    left: $x_unit;
    top: $y_unit;
  } @else {
    @include transform(
      translateX($x_unit)
      translateY($y_unit)
    );
  }
}
